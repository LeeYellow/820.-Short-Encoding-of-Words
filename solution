class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        
        std::sort(words.begin(), words.end(), myCompare);
        vector<string> finalList;
        for(auto& word : words){
            cout << word << endl;
            
            if(finalList.empty()) 
                finalList.push_back(word);
              
            if( eatWord(finalList.back(), word) ){
                finalList.pop_back();
                finalList.push_back(word);
            }else 
                finalList.push_back(word);
            
        }
        
        int output = 0;
        for(auto& word : finalList){
            output += word.size()+1;
        }
        
        
        return output;
    }
    
    
    static bool myCompare(string wrd1, string wrd2) {
        
        
        int iter1 = wrd1.size()-1, iter2 = wrd2.size()-1;
        while(iter1 >= 0 && iter2 >= 0){
            if(wrd1.at(iter1) < wrd2.at(iter2)) return true;
            if(wrd1.at(iter1) > wrd2.at(iter2)) return false;
            --iter1;
            --iter2;
        }
        
        if(iter1 <= iter2) return true;
        else return false;
        
    }
    
    bool eatWord( const string& wrd1, const string& wrd2){
        
        if(wrd1.size() > wrd2.size()) return false;
        
        int iter1 = wrd1.size()-1, iter2 = wrd2.size()-1;
        while(iter1 >= 0 && iter2 >= 0){
            if(wrd1.at(iter1) != wrd2.at(iter2)) return false; 
            --iter1;
            --iter2;
        }
        
        return true; //true when wrd2 can eat wrd1
    }


};
